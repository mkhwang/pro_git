대화형 명령
git add -i or -interactive

프롬프트가 What now> 로 바뀜

2, u 입력시 Staging area에 추가할수있는 파일보여줌

스테이지 area에 올려놓고 아직 커밋하지 않고
나중에 다시 돌아와 작업을 하고싶다
git stash / git stash save

git stash list 로 리시트 확인

git stash apply 로 적용가능 --index옵션을 주어서 staged 상태까지 적용

apply 옵션은 단순히 stash를 적용하는 것 뿐, stash는 여전히 스택에 남아있다.

git stash drop 명령을 사용하여 해당 stash 를 제거

stash 하지 않고 파일을 치워버리고 싶을 때

git clean -f -d

*RESET 명확하게 알고가기
세 개의 트리
- 트리 => 실제로는 파일의 묶음.
HEAD : 마지막 커밋 스냅샷, 다음 커밋의 부모 커밋
index : 다음에 커밋할 스냅샷
워킹 디렉터리 : 샌드박스

HEAD 
- 현재브랜치를 가리키는 포인터, 브랜치는 브랜치에 담긴 커밋중 마지막 커밋을 가리킴
- HEAD는 마지막 커밋의 스냅샷.

INDEX
 - 바로 다음에 커밋할 것들.
 Staging Area는 사용자가 git commit 명령을 실행했을 때 git이 처리할 것들이 있는곳
 - index는 워킹디렉토리에서 마지막으로 checkout한 브랜치의 파일 목록과 내용으로 채워짐
 - 이후 파일을 변경하고, 변경한 내용으로 index를 업데이트할 수 있다.
 - 업데이트하고 git commit 명령을 실행하면 index는 새 커밋으로 변환

워킹디렉터리
 - 위 두 트리는 파일과 내용을 효율적인 형태로 .git 디렉터리에 저장 -> 알아보기어려움
 - 워킹 디렉터리는 실제 파일로 존재. 사용자가 편집하기 수월하다. 워킹디렉터리는 샌드박스로 생각하자.
 - 커밋전에는 index(staing area)에 올려놓고 얼마든지 변경가능

* Checkout
 - git checkout branch 명령은 git reset --hard branch 명령과 비슷하게 
 branch 스냅샷을 기준으로 세트리를 조작.


 git merge --abort 명령으로 간단히 merge 하기 전으로 되돌린다.

 -Xignore-all-space
 -Xignore-space-change
머지시 공백제거 옵션


커밋 되돌리기
git revert -m 1 HEAD
 