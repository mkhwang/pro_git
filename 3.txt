브런치가 가리키고 있는 히스토리 출력
git log --oneline --decorate --graph --all

브런치 만들고 checkout 까지 한번에
git checkout -b iss53

merge
1. 마스터로 이동
> git checkout master
2. merge 실행
git merge hotfix

더이상 필요없는 브랜치삭제
git branch -d hotfix

브란치 목록
git branch 

git branch -v > 브랜치마다 마지막 커밋 메시지출력
git branch --merged / --no-merged 머지된 브랜치인지 아닌지 필터링

머지안한 브랜치 강제삭제
git branch -D tesing


push하기
git push origin serverfix
git push (remote) (branch)

git fetch
- 서버에는 존재하지만 로컬에는 아직 없는 데이터를 받아와서 저장.
- 워킹 디렉터리의 파일 내용 변경X 그대로 남는다.
- 서버로부터 데이터를 가져와서 저장, 사용자가 mere하도록 준비만

pull 명령은 대부분 git fetch 명령을 실행하고 나서 자동으로 
git merge명령을 수행하는 것 뿐.
> 서버로부터 데이터를 가져와서 현재 로컬 브랜치와 서버의 추적 브랜치를 merge

리모트 브랜치 삭제
 git push orign --delete serverfix
 > 협업하는 데 사용했던 리모트 브랜치 삭제

REBASE
git checkout experiment
git rebase master
 > REBASE할 브랜치가 합칠 브랜치가 가리키는 커밋을 가리키게하고 아까 저장했던,
 변경사항을 차례대로 적용

git checkout master
git merge experiment

Rebase가 좀더 깨끗한 히스토리 만든다.

이미 공개 저장소에 push한 커밋을 rebase하지 말라

